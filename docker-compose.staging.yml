version: "3.9"

services:
  web:
    build: .
    image: 800387205659.dkr.ecr.us-west-2.amazonaws.com/django-ec2:web
    command: gunicorn django_project.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:/code/sub_app/static
    expose:
      - 8000
    depends_on:
      - db

  db:
    image: postgres:12
    container_name: djfhir-db
    command: postgres -c 'max_connections=400'
    environment:
      POSTGRES_DB: 'postgres'
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
    volumes:
      - .pgdata:/data/postgres
    ports:
      - "5432:5432"


  fhir-api:
    image: "mcr.microsoft.com/healthcareapis/r4-fhir-server"
    restart: on-failure
    environment:
      FHIRServer__Security__Enabled: "false"
      SqlServer__ConnectionString: "Server=tcp:sql,1433;Initial Catalog=FHIR;Persist Security Info=False;User ID=sa;Password=Unilag55#;MultipleActiveResultSets=False;Connection Timeout=30;TrustServerCertificate=true;"
      SqlServer__AllowDatabaseCreation: "true"
      SqlServer__Initialize: "true"
      SqlServer__SchemaOptions__AutomaticUpdatesEnabled: "true"
      DataStore: "SqlServer"
    ports:     
      - "8080:8080"
    depends_on:
      - sql
      - web


  sql:
    image: "mcr.microsoft.com/mssql/server"
    environment:
      SA_PASSWORD: Unilag55#
      ACCEPT_EULA: "Y"
    healthcheck:
        test: ["CMD", "/opt/mssql-tools/bin/sqlcmd","-U sa -P Unilag55# -Q 'SELECT * FROM INFORMATION_SCHEMA.TABLES'"]
        interval: 10s
        timeout: 10s
        retries: 6

  nginx-proxy:
    container_name: nginx-proxy
    build: nginx
    image: 800387205659.dkr.ecr.us-west-2.amazonaws.com/django-ec2:nginx-proxy
    restart: always
    ports:
      - 443:443
      - 80:80
    volumes:
      - static_volume:/code/sub_app/static
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
    depends_on:
      - web

  nginx-proxy-letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    env_file:
      - ./.env.staging.proxy-companion
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - acme:/etc/acme.sh
    depends_on:
      - nginx-proxy

volumes:
  static_volume:
  certs:
  html:
  vhost:
  acme: